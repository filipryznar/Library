body {
  font-family: "Roboto", sans-serif;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}
.container {
  width: 100%;

  margin-right: auto;
  margin-left: auto;
  display: grid;

  height: 100vh;
  grid-template-rows: 1fr 6fr 1fr;
}
.header {
  background-color: #a3a228;
  color: azure;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
}

.bookShelf {
  background-color: #eabdac;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  overflow-y: auto;
  position: relative;
}

.addBook {
  display: flex;
  background-color: #a3a228;
  color: azure;
  justify-self: flex-end;
  align-self: center;
  box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
  margin-bottom: 1rem;
  padding: 0.5rem;
  border-radius: 0.5rem;
  transition: transform 0.3s, box-shadow 0.3s; /* Smooth transition */
}

.addBook:hover {
  transform: scale(1.1); /* Scale the button on hover */
  box-shadow: 0 5px 15px rgb(0 0 0 / 0.3); /* Adjust the box-shadow on hover */
}

.footer {
  background-color: #a3a228;
}

.books {
  display: flex;
  flex-grow: 1;
  flex-wrap: wrap;
  gap: 1rem;
  padding: 1rem;
  /* border: 1px solid black; */
  align-content: flex-start;
}
@keyframes implode {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  100% {
    transform: scale(0);
    opacity: 0;
  }
}
.card {
  display: grid;
  grid-template-columns: 8% 1fr;
  background-color: #c38b71;
  border-radius: 0.5rem;
  width: calc(33.333% - 2rem); /* Responsive width for 3 cards per row */
  min-width: 200px; /* Minimum width for responsiveness */
  max-width: 230px; /* Maximum width for responsiveness */
  flex-basis: calc(33.333% - 2rem); /* Flex basis for responsiveness */
  box-sizing: border-box;
  height: 30vh; /* Responsive height based on viewport height */
  min-height: 150px; /* Minimum height for responsiveness */
  max-height: 400px; /* Maximum height for responsiveness */
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
  transition: box-shadow 0.3s; /* Smooth transition for box-shadow */
}
.card.imploding {
  animation: implode 0.5s forwards; /* Apply the implode animation */
}
.card:hover {
  box-shadow: 0 5px 15px rgb(0 0 0 / 0.3); /* Adjust the box-shadow on hover */
}
.stripe {
  grid-area: 1/1/2/2;
  background-color: #532514;
}
.rest-of-card {
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0rem;
  justify-content: space-between;
}
.info {
  display: flex;
  flex-direction: column;
  padding: 0.5rem;
  flex-grow: 1;
  justify-content: space-between;
  color: aliceblue;
  font-weight: 600;
}
.readSection {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}
.toggle {
  align-items: flex-end;
}
.close {
  align-self: flex-end;
}
.change button {
  background-color: #c38b71;
  padding: 2px 16px;
  border-radius: 0.5rem;
  color: aliceblue;
  border: white 1px solid;
  transition: background-color 0.3s, color 0.3s; /* Smooth transition */
}
.change button:hover {
  background-color: white; /* Change background color on hover */
  color: #c38b71; /* Change text color on hover */
  border-color: #c38b71; /* Change border color on hover */
}

.close button {
  background: none;
  border: none; /* Remove border */
  color: white; /* Set text color to white */
  padding: 3px 8px; /* Remove padding */
  margin: 0; /* Remove margin */
  font-size: 1.5rem; /* Adjust font size */
  border-radius: 0.5rem;
  color: aliceblue;
  border: white 1px solid;
  transition: background-color 0.3s, color 0.3s; /* Smooth transition */
}
.close button:hover {
  background-color: white; /* Change background color on hover */
  color: #c38b71; /* Change text color on hover */
  border-color: #c38b71; /* Change border color on hover */
}
::backdrop {
  background-image: linear-gradient(
    45deg,
    magenta,
    rebeccapurple,
    dodgerblue,
    green
  );
  opacity: 0.75;
}
/*   Open state of the dialog  */
dialog[open] {
  opacity: 1;
  transform: scaleY(1);
}
/*   Closed state of the dialog   */
dialog {
  opacity: 0;
  transform: scaleY(0);
  transition: opacity 0.7s ease-out, transform 0.7s ease-out,
    overlay 0.7s ease-out allow-discrete, display 0.7s ease-out allow-discrete;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}
/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
    transform: scaleY(0);
  }
}
/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition: display 0.7s allow-discrete, overlay 0.7s allow-discrete,
    background-color 0.7s;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

dialog[open]::backdrop {
  background-color: rgb(0 0 0 / 25%);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 0%);
  }
}

/*   Form styling  */

#dialog {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
  box-sizing: border-box;
  width: 100%;
  max-width: 400px;
  margin: 0 auto;
  border: 1px solid #ccc;
  border-radius: 0.5rem;

  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
  margin-top: 2rem;
}

#dialog form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 0.5rem 1rem;
  width: 100%;
  max-width: 400px;
  margin: 0 auto;
  box-sizing: border-box;
}
form p {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  width: 100%;
}
form label {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  width: 100%;
  font-size: large;
}
form input {
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 0.25rem;
}
form button {
  background-color: #a3a228;
  color: aliceblue;
  padding: 0.5rem;
  border: none;
  border-radius: 0.25rem;
}
form p button {
  background-color: #a3a228;
  border: none; /* Remove border */
  color: white; /* Set text color to white */
  padding: 0; /* Remove padding */
  margin: 0; /* Remove margin */
  font-size: large; /* Adjust line height */
  align-self: flex-end;
  padding: 5px 10px;
  transition: transform 0.3s, box-shadow 0.3s; /* Smooth transition */
}
form p button:hover {
  transform: scale(1.1); /* Scale the button on hover */
  box-shadow: 0 5px 15px rgb(0 0 0 / 0.3); /* Adjust the box-shadow on hover */
}
/* Adjusting the read label and checkbox */
.readContainer {
  display: flex;

  flex-direction: row;
  align-items: center;
  justify-content: space-between;
}

#read {
  transform: scale(3); /* Make the checkbox larger */

  margin-right: 0.8rem;
}
form div {
  display: flex;
  justify-content: center;
}
#confirmBtn {
  font-size: 1.3rem;
  padding: 0.5rem;
  border: none;
  border-radius: 0.25rem;
  background-color: #a3a228;
  color: aliceblue;
  transition: transform 0.3s, box-shadow 0.3s; /* Smooth transition */
  font-size: bold;
}
#confirmBtn:hover {
  transform: scale(1.1); /* Scale the button on hover */
  box-shadow: 0 5px 15px rgb(0 0 0 / 0.3); /* Adjust the box-shadow on hover */
}
/* Adding red asterisk for required fields */
label.required > span::after {
  content: " *";
  color: red;
}
